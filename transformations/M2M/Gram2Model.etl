pre{
	var a: ModelMM!Architecture;
	var bm: ModelMM!BusinessModel;
	
	var dataTypes = new Sequence;
	
	dataTypes.add(new ModelMM!String);
	dataTypes.add(new ModelMM!Integer);
	dataTypes.add(new ModelMM!Float);
	dataTypes.add(new ModelMM!Boolean);
	dataTypes.add(new ModelMM!Date);
	dataTypes.add(new ModelMM!Enum);
	
	PilaValidationsMM!PilaValidations.all.collect(t|t.getArchitecture());
	a.views = GrammarMM!ServiceOperator.all.at(0).getViews();
}

rule ServiceOp2Entity
	transform
		s:GrammarMM!ServiceOperator
	to
		t:ModelMM!Entity{
			bm.entities.add(t);
			t.name = s.name;
			t.childrenEntities = s.superEntities.equivalent();
			t.childrenEntities.addAll(s.services.equivalent());
			t.attributes = s.attributes.equivalent();
		}
		
rule SuperEnt2Entity
	transform
		s:GrammarMM!SuperEntity
	to
		t:ModelMM!Entity{
			t.name = s.name;
			t.childrenEntities = s.entities.equivalent();
			t.childrenEntities.add(s.pays.equivalent());
			t.attributes = s.attributes.equivalent();
		}
		
rule BusinessEnt2Entity
	transform
		s:GrammarMM!BusinessEntity
	to
		t:ModelMM!Entity{
			t.name = s.name;
			t.attributes = s.attributes.equivalent();
		}
		
rule Pay2Entity
	transform
		s:GrammarMM!Pay
	to
		t:ModelMM!Entity{
			t.name = s.name;
			t.attributes = s.attributes.equivalent();
		}
		
rule Service2Entity
	transform
		s:GrammarMM!Service
	to
		t:ModelMM!Entity{
			t.name = s.name;
			t.attributes = s.displayName.equivalent();
			t.methods = s.calculate.equivalent();
		}
		
rule Calculate2Method
	transform
		s:GrammarMM!Calculate
	to
		t:ModelMM!Method{
			t.name = s.name;
			t.body = s.toBody();
		}
				
rule StringAttr2Attr
	transform
		s:GrammarMM!StringValue
	to
		t:ModelMM!Attribute{
			t.name = s.name.replace("\"","");
			t.attType = dataTypes[0];
		}

rule IntegerAttr2Attr
	transform
		s:GrammarMM!IntegerValue
	to
		t:ModelMM!Attribute{
			t.name = s.name.replace("\"","");
			t.attType = dataTypes[1];
		}

rule BooleanAttr2Attr
	transform
		s:GrammarMM!BooleanValue
	to
		t:ModelMM!Attribute{
			t.name = s.name.replace("\"","");
			t.attType = dataTypes[3];
		}
		
rule FloatAttr2Attr
	transform
		s:GrammarMM!FloatValue
	to
		t:ModelMM!Attribute{
			t.name = s.name.replace("\"","");
			t.attType = dataTypes[2];
		}
		
rule DateAttr2Attr
	transform
		s:GrammarMM!Date
	to
		t:ModelMM!Attribute{
			t.name = s.name.replace("\"","");
			t.attType = dataTypes[4];
		}
		
rule EnumAttr2Attr
	transform
		s:GrammarMM!Enum
	to
		t:ModelMM!Attribute{
			t.name = s.name;
			t.value = s.items;
			t.attType = dataTypes[5];
		}

rule ComplexAttr2Entity
	transform
		s:GrammarMM!Complex
	to
		t:ModelMM!Entity{
			t.name = s.name.replace("\"","").firstToUpperCase();
			t.attributes = s.attributes.equivalent();			
		}
			
operation GrammarMM!Calculate toBody(): ModelMM!Body{
	var body : new ModelMM!Body;
	var contents : String;
	var level : Integer;
	level = 1;
	for (cond in self.conditions){
		contents += cond.transformStatement(level);
	}
	body.content = contents;
	//body.content.println();
	return body;
}

operation GrammarMM!Statement transformStatement(level : Integer) : String{
	var contents : String;
	level += 1;
	contents += "\n"; 
	var base : String = "";
	var cont = 0;
	while(cont < level){
		base += "\t";
		cont++;
	}
	
	contents += base;
	
	if (self.isTypeOf(GrammarMM!Variable)){
		contents += self.name.tolowercase();
		contents += " = ";
		contents += self.value;
		contents += "\n";
	}
	else if (self.isTypeOf(GrammarMM!If)){
		contents += self.transformIf(level);
	}
	else if (self.isTypeOf(GrammarMM!Return)){
		contents += "return ";
		contents += self.value.transformOperation();
		contents += "\n";
	}
	
	return contents;
}

operation GrammarMM!If transformIf(level : Integer) : String{
	var contents : String = "";
	var hasLogicOp : Boolean = false;
	var logicOpSeq : Sequence;
	var logicOpIt : Integer = 0;
	
	var base : String = "";
	var cont = 0;
	while(cont < level){
		base += "\t";
		cont++;
	}
	
	contents += "if ";
	
	if(self.expressions.size()>1){
		hasLogicOp = true;
		logicOpSeq = self.logoperator;
		logicOpSeq.println();
	}
	
	if(not self.expressions.isEmpty()){
		for (exp in self.expressions){
			exp.transformExpression().println();
			contents += exp.transformExpression();
			if(hasLogicOp and (logicOpIt < logicOpSeq.size())){
				contents += " ";
				contents += logicOpSeq.at(logicOpIt);
				contents += " ";
				logicOpIt++;
			}
		}
	}
	
	contents += ":\n";
	
	if(not self.statements.isEmpty()){
		for (st in self.statements){
			contents += base + st.transformStatement(level);
		}
	}
	
	if(not self.esleIf.isEmpty()){
		contents += "\t";
		for (elf in self.esleIf){
			contents += "\n";
			contents += base + "elif ";
			
			var hasLogicOpEIf : Boolean = false;
			var logicOpSeqEIf : Sequence;
			var logicOpItEIf : Integer = 0;
	
			if(elf.expressions.size()>1){
				hasLogicOpEIf = true;
				logicOpSeqEIf = elf.logoperator;
				logicOpSeqEIf.println();
			}
			
			if(not elf.expressions.isEmpty()){		
				for(exp in elf.expressions){
					contents += exp.transformExpression();
					if(hasLogicOpEIf and (logicOpItEIf < logicOpSeqEIf.size())){
						contents += " ";
						contents += logicOpSeqEIf.at(logicOpItEIf);
						contents += " ";
						logicOpItEIf++;
					}
				}
			}
			
			contents += ":\n";
			
			if(not elf.statements.isEmpty()){
				for(st in elf.statements){
					contents += st.transformStatement(level);
				}
			}
		}
	}
	
	if(self.els.isDefined()){
		contents += "\n";
		contents += base + "else";
		contents += ":\n";
		for (el in self.els){
			if(not el.statements.isEmpty()){
				for(st in el.statements){
					contents += st.transformStatement(level);
				}
			}
		}
	}
	
	//contents += "\n} ";

	return contents;
}

operation GrammarMM!Expression transformExpression() : String{
	var contents : String;

	if(self.elementLeft.isDefined()){
		contents += self.elementLeft.element.toLowerCase();
		contents += " ";
	}
	if(self.comparator.isDefined()){
		contents += self.comparator;
		contents += " ";
	}
	if(self.elementRight.isDefined()){
		contents += self.elementRight.element.toLowerCase();
	}
	
	return contents;
}

operation GrammarMM!Operation transformOperation() : String{
	var contents : String;
	
	if(self.valueLeft.isDefined()){
		contents += self.valueLeft.toLowerCase();
		contents += " ";
	}
	if(self.operator.isDefined()){
		contents += self.operator;
		contents += " ";
	}
	if(self.valueRight.isDefined()){
		contents += self.valueRight.toLowerCase();
	}
	
	return contents;
}

operation PilaValidationsMM!PilaValidations getArchitecture () : ModelMM!Architecture {
	a = new ModelMM!Architecture;
	
	bm = new ModelMM!BusinessModel;
	bm.entities = self.getEntities();
	bm.dataTypes = dataTypes;
	
	a.businessModel = bm;
	
	return a;
}

operation PilaValidationsMM!PilaValidations getEntities() : Sequence {
	var entities = new Sequence;
	
	if (not self.pagadorpensiones.isEmpty()) {
		var entity = new ModelMM!Entity;
		entity.name = self.pagadorpensiones.get(0).eClass.name;
			
		var attribute = new ModelMM!Attribute;
		attribute.name = 'descripcion';
		attribute.attType = dataTypes[0];
			
		entity.attributes.add(attribute);
		entities.add(entity);
	}
	
	if (not self.tipopensionado.isEmpty()) {
		var entity = new ModelMM!Entity;
		entity.name = self.tipopensionado.get(0).eClass.name;
			
		var attribute = new ModelMM!Attribute;
		attribute.name = 'descripcion';
		attribute.attType = dataTypes[0];
			
		entity.attributes.add(attribute);
		entities.add(entity);
	}
	
	if (not self.tipopension.isEmpty()) {
		var entity = new ModelMM!Entity;
		entity.name = self.tipopension.get(0).eClass.name;
			
		var attribute = new ModelMM!Attribute;
		attribute.name = 'descripcion';
		attribute.attType = dataTypes[0];
			
		entity.attributes.add(attribute);
		entities.add(entity);
	}
	
	if (not self.tiponovedad.isEmpty()) {
		var entity = new ModelMM!Entity;
		entity.name = self.tiponovedad.get(0).eClass.name;
		
		var attribute = new ModelMM!Attribute;
		attribute.name = 'descripcion';
		attribute.attType = dataTypes[0];
		
		entity.attributes.add(attribute);
		entities.add(entity);
	}
	
	if (not self.codigociu.isEmpty()) {
		var entity = new ModelMM!Entity;
		entity.name = self.codigociu.get(0).eClass.name;
		
		var attribute = new ModelMM!Attribute;
		attribute.name = 'descripcion';
		attribute.attType = dataTypes[1];
		
		entity.attributes.add(attribute);
		entities.add(entity);
	}
	
	if (not self.tipopensionado.get(0).pagadorpensiones.isEmpty()) {
		var entity = new ModelMM!Entity;
		var nombre = self.tipopensionado.get(0).eClass.name + 
		self.tipopensionado.get(0).pagadorpensiones.get(0).eClass.name;
		entity.name = nombre;
			
		var attribute1 = new ModelMM!Attribute;
		attribute1.name = 'tipo_pensionado' + '-' + self.tipopensionado.get(0).eClass.name;
		
		entity.attributes.add(attribute1);
		
		var attribute2 = new ModelMM!Attribute;
		attribute2.name = 'tipo_pagador_pensiones' + '-' + self.tipopensionado.get(0).pagadorpensiones.get(0).eClass.name;
		
		entity.attributes.add(attribute2);
		
		entities.add(entity);
	}
	
	return entities;
}

operation GrammarMM!ServiceOperator getViews(): Sequence{	
	var views = new Sequence;
	
	var viewParent = new ModelMM!View;
	viewParent.name = self.name;
	viewParent.gComponents = self.attributes.getGraphicalComponents();	
	
	var viewChild1 = new ModelMM!View;
	for (superEntity in self.superEntities){		
		viewChild1.name = superEntity.name;
		viewChild1.gComponents = superEntity.attributes.getGraphicalComponents();
		viewChild1.childs = superEntity.getViewChilds();
		
		viewParent.childs.add(viewChild1);		
		
		for (entity in superEntity.entities){
			var viewChild2 = new ModelMM!View;
			viewChild2.name = entity.name;
			viewChild2.gComponents = entity.attributes.getGraphicalComponents();			
			viewChild1.childs.addAll(entity.getViewChilds());			
			
			viewChild1.childs.add(viewChild2);
		}
		
		for (pay in superEntity.pays){
			var viewChild3 = new ModelMM!View;
			viewChild3.name = pay.name;
			viewChild3.gComponents = pay.attributes.getGraphicalComponents();			
			viewChild3.childs = pay.getViewChilds();
			
			viewChild1.childs.add(viewChild3);
		}		
	}	
	
	for (service in self.services){
		var viewChild4 = new ModelMM!View;
		viewChild4.name = service.name;
		viewChild4.gComponents = service.calculate.getGraphicalComponents();		
		
		viewChild1.childs.add(viewChild4);
	}
	
	views.add(viewParent);
	return views;
}

operation GrammarMM!Enum getItems(): Sequence{
	var items = new Sequence;
	
	var isFirts = new Boolean;
	isFirts = true;	
	for (item in self.items){
		var newItem = new ModelMM!ListItem;
		newItem.action = item;
		
		if (isFirts){
			newItem.isSelected = true;
			isFirts = false;			
		}
		
		items.add(newItem);	
	}
	
	return items;
}

operation Collection getGraphicalComponents(): Sequence{
	var graphicalComponents = new Sequence;
	
	var idCalculate = 1;
	for (attribute in self){
		if (attribute.isTypeOf(GrammarMM!StringValue)){
			var text = new ModelMM!Text;
			text.name = attribute.name.substring(1, attribute.name.length() - 1);
			text.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			
			graphicalComponents.add(text);
		}
		else if (attribute.isTypeOf(GrammarMM!IntegerValue)){
			var number = new ModelMM!Number;
			number.name = attribute.name.substring(1, attribute.name.length() - 1);
			number.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			
			graphicalComponents.add(number);
		}
		else if (attribute.isTypeOf(GrammarMM!BooleanValue)){
			var radio = new ModelMM!Radio;
			radio.name = attribute.name.substring(1, attribute.name.length() - 1);
			radio.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			
			graphicalComponents.add(radio);
		}
		else if (attribute.isTypeOf(GrammarMM!FloatValue)){
			var number = new ModelMM!Number;
			number.name = attribute.name.substring(1, attribute.name.length() - 1);
			number.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			
			graphicalComponents.add(number);
		}
		else if (attribute.isTypeOf(GrammarMM!Date)){
			var datePicker = new ModelMM!DatePicker;
			datePicker.name = attribute.name.substring(1, attribute.name.length() - 1);
			datePicker.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			
			graphicalComponents.add(datePicker);
		}
		else if (attribute.isTypeOf(GrammarMM!Enum)){
			var dropdownList = new ModelMM!DropdownList;
			dropdownList.name = attribute.name.substring(1, attribute.name.length() - 1);
			dropdownList.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			dropdownList.items = attribute.getItems();
			
			graphicalComponents.add(dropdownList);
		}	
		else if (attribute.isTypeOf(GrammarMM!Calculate)){
			var button = new ModelMM!Button;			
			button.name = attribute.name.toLowerCase();
			button.displayName = attribute.name;			
			button.id = idCalculate + "";
			
			idCalculate += 1;	
			
			graphicalComponents.add(button);
		}					
	}
	
	return graphicalComponents;
}

operation Any getViewChilds(): Sequence{
	var views = new Sequence;
	
	for (attribute in self.attributes){
		if (attribute.isTypeOf(GrammarMM!Complex) and attribute.name.matches("\"novedad\"")){
					
			var view = new ModelMM!View;
			view.name = attribute.name.substring(1, attribute.name.length() - 1).firstToUpperCase();			
			view.gComponents = attribute.attributes.getGraphicalComponents();
			
			views.add(view);								
		}							
	}
	
	return views;
}