# coding=utf-8
from __future__ import unicode_literals

from django.contrib.auth.models import User
from django.db import models

[%
var fkeys : new Map;
var hasEnums : new Map;
for (ent in marq!Entity.allInstances()){
	ent.name.println();
	ent.childrenEntities.println();
	
	for (child in ent.childrenEntities){
		if(not fkeys.containsKey(child.name)){
			fkeys.put(child.name, new Sequence);
		}
		fkeys.get(child.name).add(ent.name);
	}
	for (att in ent.attributes.select(a|a.isTypeOf(marq!Entity))){
		if(not fkeys.containsKey(att.name)){
			fkeys.put(att.name, new Sequence);
		}
		fkeys.get(att.name).add(ent.name);
		
		for (grandpa in fkeys.get(ent.name)){
			fkeys.get(att.name).add(grandpa);	
		}
	}
%]
class [%=ent.name%](models.Model):
	[%
	for(att in ent.attributes){
		if(ent.name.equals("ServiceOperator") or ent.name.equals("Aportante")){
		%]
	usuario_id = models.OneToOneField(User)	
		[%
		}
		if(att.isTypeOf(marq!Attribute)){
			if(att.attType.isTypeOf(marq!Enum)){
	%]
	[%=att.name.replace("\"","").toUpperCase()%] = []
	[%	
			}
	%]
	[%=att.findDataType()%]
	[%
		}
	}
	for(fk in fkeys.get(ent.name)){
		if(fk.isDefined()){
	%]
	[%=fk.toLowerCase()%] = models.ForeignKey([%=fk%])
	[%
		}
	}
	
	if(ent.attributes.select(a|a.isTypeOf(marq!Attribute)).select(b|b.attType.isTypeOf(marq!Enum)).size() > 0){
	%]
	
	def __init__(self,*args,**kwargs):
		super([%=ent.name%],self).__init__(*args,**kwargs)
	[%}
	for (att in ent.attributes.select(a|a.isTypeOf(marq!Attribute)).select(b|b.attType.isTypeOf(marq!Enum))){
		if(marq!Entity.allInstances().select(e|e.name.toLowerCase() = att.name.replace("\"","").toLowerCase()).size()>0){
			var refEntity = marq!Entity.allInstances().select(e|e.name.toLowerCase() = att.name.replace("\"","").toLowerCase()).first();
	%]
		opciones_[%=att.name.replace("\"","")%] = [%=refEntity.name%].objects().all()
		for opcion_[%=att.name.replace("\"","")%] in opciones_[%=att.name.replace("\"","")%]:
			self.[%=att.name.replace("\"","").toUpperCase()%].append((opcion_[%=att.name.replace("\"","")%].pk, 
											opcion_[%=att.name.replace("\"","")%].[%=refEntity.attributes.first().name%]))
		
	[%
		}
	}
	
	for (meth in ent.methods){
	%]	
	@staticmethod
	def calcular_[%=meth.name%](pensionado):
		novedades = Novedad.objects.filter(pensionado_id=pensionado.pk).order_by('pk')
	[%=meth.body.transformBody()%]
	[%
	}
	
	%]
	
[%	
}
%]

[%
operation marq!Attribute findDataType() : String {
	if(self.isDefined()){
		if(self.attType.isTypeOf(marq!String)){
			return self.name + " = models.CharField(max_length=250)";
		}
		else if(self.attType.isTypeOf(marq!Integer)){
			return self.name + " = models.IntegerField()";
		}
		else if(self.attType.isTypeOf(marq!Float)){
			return self.name + " = models.FloatField()";
		}
		else if(self.attType.isTypeOf(marq!Boolean)){
			return self.name + " = models.BooleanField()";
		}
		else if(self.attType.isTypeOf(marq!Date)){
			return self.name + " = models.DateField()";
		}
		else if(self.attType.isTypeOf(marq!Enum)){
			return self.name.replace("\"","") + " = models.IntegerField(choices=" + self.name.replace("\"","").toUpperCase() + ")";
		}
		else{
			var fks = self.name.split("-");
			return fks[0] + " = models.ForeignKey(" + fks[1] + ")";
		}
	}
	return self.toString();
}

operation marq!Body transformBody () : String {
	var cont = self.content;
	cont = cont.replace("-Null-","None");
	cont = cont.replace("-notnull-","not None");
	cont = cont.replace("AND","and");
	cont = cont.replace("OR","or");
	cont = cont.replace("true","True");
	cont = cont.replace("false","False");
	cont = cont.replace("novedades.ultimo","novedades.reverse()[0]");
	
	return cont;
}
%]